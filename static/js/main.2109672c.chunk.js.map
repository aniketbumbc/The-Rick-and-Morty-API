{"version":3,"sources":["util.ts","components/Episodes/Episodes.tsx","components/Ricks/Ricks.tsx","App.tsx","index.tsx"],"names":["baseUrl","useStyles","makeStyles","paper","padding","textAlign","marginTop","marginLeft","marginRight","backBtn","Episodes","React","memo","episodes","setEpisodesShowData","classes","useState","undefined","episodesName","setEpisodesName","loading","setLoading","getEpisodesUrl","toString","getEpisodesName","useCallback","axios","get","then","responese","status","episodesData","data","length","forEach","episode","push","name","catch","error","message","response","alert","useEffect","Typography","variant","className","Button","style","onClick","Grid","container","spacing","item","xs","map","Fragment","sm","md","lg","Paper","CircularProgress","rickContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","carContent","rickName","display","residents","header","justifyContent","Ricks","setResidents","setEpisodes","setError","dimension","setDimension","rickData","setRickData","showEpisodes","setShowEpisodes","open","setOpen","results","displayEpisodes","episodesNumber","substring","lastIndexOf","getEpisodesNumber","handleResidentsModal","id","a","fetch","json","locationData","handleClose","AppBar","position","rick","image","species","location","origin","Card","CardMedia","width","height","CardContent","gutterBottom","component","CardActions","size","color","url","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","showCards","showData","App","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAuCaA,EAAU,mC,uFC1BjBC,EAAYC,aAAW,iBAAO,CAClCC,MAAO,CACLC,QAAS,OACTC,UAAW,SACXC,UAAW,OACXC,WAAY,OACZC,YAAa,QAEfC,QAAS,CACPF,WAAY,YAuGDG,EA5F0BC,IAAMC,MAC7C,YAAwC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,oBACLC,EAAUd,IAEhB,EAAwCe,wBAAcC,GAAtD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8BH,oBAAkB,GAAhD,mBAAOI,EAAP,KAAgBC,EAAhB,KACMC,EAAsB,UAAMtB,EAAN,mBAAwBa,EAASU,YAqBvDC,EAAkBC,uBAAY,WAClCC,IACGC,IAAIL,GACJM,MAAK,SAACC,GACL,GAAyB,MAArBA,EAAUC,OAAgB,CAC5B,IAAMC,EAAyB,GAC1BF,EAAUG,KAAKC,OAGlBJ,EAAUG,KAAKE,SAAQ,SAACC,GACtBJ,EAAaK,KAAKD,EAAQE,SAH5BN,EAAaK,KAAKP,EAAUG,KAAKK,MAMnChB,GAAW,GACXF,EAAgBY,OAGnBO,OAAM,SAACC,GACgB,kBAAlBA,EAAMC,QACJD,GAASA,EAAME,UAAsC,MAA1BF,EAAME,SAASX,QAC5CY,MAAM,yCAIRA,MAAM,6BAGX,CAACpB,IAMJ,OAJAqB,qBAAU,WACRnB,MACC,CAACA,IAGF,gCACE,cAACoB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,QAAnC,4DAGA,cAACC,EAAA,EAAD,CACEF,QAAQ,YACRG,MAAO,CAAEzC,WAAY,QACrB0C,QAAS,kBAAMnC,GAAoB,IAHrC,kBAOA,gCACGI,GACC,cAACgC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACE,cAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,MAAI,EAACC,GAAI,GAAIF,QAAS,EAAtC,SACGlC,GACCA,EAAaqC,KAAI,SAAC1C,GAAD,OAhENsB,EAiEOtB,EA/D5B,cAAC,IAAM2C,SAAP,UACE,cAACN,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGG,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAApC,SACE,cAACC,EAAA,EAAD,CAAOd,UAAW/B,EAAQZ,MAA1B,SAAkCgC,OAFjBA,GAFD,IAACA,SAsEnB,qBAAKW,UAAU,SAAf,SACG1B,IAAYF,GAAgB,cAAC2C,EAAA,EAAD,e,0FChGnC5D,EAAYC,YAAW,CAC3B4D,cAAe,CACbC,WAAY,OACZC,YAAa,OACbC,aAAc,QAEhBC,UAAW,CACTC,OAAQ,QAEVC,WAAY,CACV/D,UAAW,UAEbgE,SAAU,CACRC,QAAS,SACTH,OAAQ,OACR/D,QAAS,QAEXmE,UAAW,CACTJ,OAAQ,QAEVK,OAAQ,CACNF,QAAS,OACTG,eAAgB,SAChBN,OAAQ,UAwMGO,EArMS,WACtB,IAAM3D,EAAUd,IAChB,EAAkCe,mBAAiB,GAAnD,mBAAOuD,EAAP,KAAkBI,EAAlB,KACA,EAAgC3D,mBAAc,IAA9C,mBAAOH,EAAP,KAAiB+D,EAAjB,KACA,EAA0B5D,oBAAkB,GAA5C,mBAAOuB,EAAP,KAAcsC,EAAd,KACA,EAAkC7D,mBAAiB,IAAnD,mBAAO8D,EAAP,KAAkBC,EAAlB,KACA,EAAgC/D,mBAAgB,IAAhD,mBAAOgE,EAAP,KAAiBC,EAAjB,KACA,EAAwCjE,oBAAkB,GAA1D,mBAAOkE,EAAP,KAAqBC,EAArB,KACA,EAAwBxE,IAAMK,UAAkB,GAAhD,mBAAOoE,EAAP,KAAaC,EAAb,KAEA1C,qBAAU,WACRjB,IACGC,IADH,UACU3B,EADV,cAEG4B,MAAK,SAACC,GACoB,MAArBA,EAAUC,SACZmD,EAAYpD,EAAUG,KAAKsD,SAC3BT,GAAS,OAGZvC,OAAM,SAACC,GACNsC,GAAS,GACa,kBAAlBtC,EAAMC,QACsB,MAA1BD,EAAME,SAASX,QACjBY,MAAM,yCAIRA,MAAM,6BAGX,IAQH,IAgBM6C,EAAkB,SAAC1E,IAhBC,SAACA,GACzB,IAAM2E,EAA2B,GACjC3E,EAASqB,SAAQ,SAACC,GAChBqD,EAAepD,KAAKD,EAAQsD,UAAUtD,EAAQuD,YAAY,KAAO,OAE/DF,GAAkBA,EAAevD,QACnC2C,EAAYY,GAWdG,CAAkB9E,GAClBsE,GAAgB,IASZS,EAAoB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEACJC,MAAMF,GADF,cACrBpD,EADqB,gBAEUA,EAASuD,OAFnB,QAErBC,EAFqB,UAGX,UAAIA,EAAa1B,iBAAjB,aAAI,EAAwBtC,UAC1C0C,EAAasB,EAAa1B,UAAUtC,QACpC8C,EAAakB,EAAanB,YAE5BO,GAAQ,GAPmB,2CAAH,sDAcpBa,GAAc,WAClBb,GAAQ,IAsFV,OACE,qCACE,cAACc,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACxD,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAW/B,EAAQyD,OAA5C,mCAIAjC,IAAU2C,GAAgBF,GAC1B,cAAC9B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGN,UAAW/B,EAAQ+C,cAA/C,SACGkB,GAAYA,EAASzB,KAAI,SAAC8C,GAAD,OA7EhB,SAACR,GACjB,MAA4Db,EAC1Da,EAAK,GADCS,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QAASlE,EAAxB,EAAwBA,KAAMmE,EAA9B,EAA8BA,SAAUC,EAAxC,EAAwCA,OAAQtE,EAAhD,EAAgDA,QAGhD,OACE,cAACe,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIG,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,eAAC+C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACE7D,UAAW/B,EAAQmD,UACnBoC,MAAOA,EACPtD,MAAO,CAAE4D,MAAO,QAASC,OAAQ,WAEnC,eAACC,EAAA,EAAD,CAAahE,UAAW/B,EAAQqD,WAAhC,UACE,cAACxB,EAAA,EAAD,CAAYmE,cAAY,EAAClE,QAAQ,KAAKmE,UAAU,KAAhD,SACG3E,IAEH,eAACO,EAAA,EAAD,CAAYC,QAAQ,YAAYkE,cAAY,EAA5C,sBACYR,KAEZ,eAAC3D,EAAA,EAAD,CAAYC,QAAQ,YAAYkE,cAAY,EAA5C,qBACWN,EAAOpE,QAElB,eAACO,EAAA,EAAD,CAAYC,QAAQ,YAAYkE,cAAY,EAA5C,uBACaP,EAASnE,WAGxB,eAAC4E,EAAA,EAAD,WACE,cAAClE,EAAA,EAAD,CACEmE,KAAK,QACLC,MAAM,UACNlE,QAAS,kBAAMsC,EAAgBpD,IAHjC,sBAOA,cAACY,EAAA,EAAD,CACEmE,KAAK,QACLC,MAAM,UACNlE,QAAS,kBAAM2C,EAAqBY,EAASY,MAH/C,uBAOA,eAACC,EAAA,EAAD,CACEjC,KAAMA,EACNkC,QAASpB,GACT,kBAAgB,qBAChB,mBAAiB,2BAJnB,UAME,cAACqB,EAAA,EAAD,CAAa1B,GAAG,qBAAhB,uBACA,cAAC2B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAmB5B,GAAG,2BAAtB,SACE,eAACjD,EAAA,EAAD,CAAYoE,UAAW,OAAQnE,QAAS,QAAxC,yBACe0B,EADf,IAC0B,uBAD1B,eAEeO,SAInB,cAAC4C,EAAA,EAAD,UACE,cAAC3E,EAAA,EAAD,CAAQE,QAASiD,GAAaiB,MAAM,UAAUQ,WAAS,EAAvD,4BApDmC9B,GAwEK+B,CAAUvB,EAAKR,UAG/DtD,GAAS2C,GACT,cAAC,EAAD,CACErE,SAAUA,EACVC,oBA5FoB,SAAC+G,GAC3B1C,EAAgB0C,MA+FbtF,GACC,cAACK,EAAA,EAAD,CACEC,QAAQ,KACRG,MAAO,CAAEsB,QAAS,OAAQG,eAAgB,UAF5C,kDC9NOqD,EARH,WACV,OACE,8BACE,cAAC,EAAD,O,iBCAAC,EAAUC,cAEhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAQJ,QAASA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.2109672c.chunk.js","sourcesContent":["export interface RickData {\n  id: number;\n  name: string;\n  status: string;\n  species: string;\n  type: string;\n  gender: string;\n  origin: OriginOrLocation;\n  location: OriginOrLocation;\n  image: string;\n  episode?: string[] | null;\n  url: string;\n  created: string;\n}\nexport interface OriginOrLocation {\n  name: string;\n  url: string;\n}\n\nexport interface Location {\n  id: number;\n  name: string;\n  type: string;\n  dimension: string;\n  residents?: string[] | null;\n  url: string;\n  created: string;\n}\n\nexport interface Episode {\n  id: number;\n  name: string;\n  air_date: string;\n  episode: string;\n  characters?: string[] | null;\n  url: string;\n  created: string;\n}\n\nexport const baseUrl = 'https://rickandmortyapi.com/api/';\n","import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport {\n  Grid,\n  Button,\n  Paper,\n  CircularProgress,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { baseUrl, Episode } from '../../util';\nimport './Episodes.css';\n\nconst useStyles = makeStyles(() => ({\n  paper: {\n    padding: '20px',\n    textAlign: 'center',\n    marginTop: '30px',\n    marginLeft: '50px',\n    marginRight: '10px',\n  },\n  backBtn: {\n    marginLeft: '50px',\n  },\n}));\n\ninterface EpisodsProps {\n  /** model of episodes */\n  episodes: string[];\n  /**  Call back function  */\n  setEpisodesShowData(arg: boolean): void;\n}\n\nconst Episodes: React.FC<EpisodsProps> = React.memo(\n  ({ episodes, setEpisodesShowData }) => {\n    const classes = useStyles();\n\n    const [episodesName, setEpisodesName] = useState<any>(undefined);\n    const [loading, setLoading] = useState<boolean>(true);\n    const getEpisodesUrl: string = `${baseUrl}episode/${episodes.toString()}`;\n\n    /**\n     * Method displays episodes on grid\n     * @param episode{string}\n     */\n\n    const displayEpisodes = (episode: string) => {\n      return (\n        <React.Fragment key={episode}>\n          <Grid item xs={6} sm={6} md={6} lg={3}>\n            <Paper className={classes.paper}>{episode}</Paper>\n          </Grid>\n        </React.Fragment>\n      );\n    };\n\n    /**\n     * Method fetch episodes and set state setEpisodesName\n     */\n\n    const getEpisodesName = useCallback(() => {\n      axios\n        .get(getEpisodesUrl)\n        .then((responese) => {\n          if (responese.status === 200) {\n            const episodesData: string[] = [];\n            if (!responese.data.length) {\n              episodesData.push(responese.data.name);\n            } else {\n              responese.data.forEach((episode: Episode) => {\n                episodesData.push(episode.name);\n              });\n            }\n            setLoading(false);\n            setEpisodesName(episodesData);\n          }\n        })\n        .catch((error) => {\n          if (error.message !== 'Network Error') {\n            if (error && error.response && error.response.status === 503) {\n              alert('Service Unavailable, Please Try Again');\n            }\n          } else {\n            /* Handling error when 404 or others */\n            alert('Something Went Wrong');\n          }\n        });\n    }, [getEpisodesUrl]);\n\n    useEffect(() => {\n      getEpisodesName();\n    }, [getEpisodesName]);\n\n    return (\n      <div>\n        <Typography variant='h6' className='title'>\n          Name of the episodes character is featured on.\n        </Typography>\n        <Button\n          variant='contained'\n          style={{ marginLeft: '50px' }}\n          onClick={() => setEpisodesShowData(false)}\n        >\n          Back\n        </Button>\n        <div>\n          {episodesName && (\n            <Grid container spacing={3}>\n              <Grid container item xs={12} spacing={3}>\n                {episodesName &&\n                  episodesName.map((episodes: string) =>\n                    displayEpisodes(episodes)\n                  )}\n              </Grid>\n            </Grid>\n          )}\n          <div className='loader'>\n            {loading && !episodesName && <CircularProgress />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Episodes;\n","import React, { useState, useEffect } from 'react';\nimport { RickData, Location, baseUrl } from '../../util';\nimport Episodes from '../Episodes/Episodes';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  AppBar,\n  Grid,\n  Card,\n  CardContent,\n  CardMedia,\n  CardActions,\n  Button,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContentText,\n  DialogContent,\n  DialogTitle,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  rickContainer: {\n    paddingTop: '20px',\n    paddingLeft: '50px',\n    paddingRight: '50px',\n  },\n  cardMedia: {\n    margin: 'auto',\n  },\n  carContent: {\n    textAlign: 'center',\n  },\n  rickName: {\n    display: 'inline',\n    margin: '10px',\n    padding: '20px',\n  },\n  residents: {\n    margin: 'auto',\n  },\n  header: {\n    display: 'flex',\n    justifyContent: 'center',\n    margin: '20px',\n  },\n});\nconst Ricks: React.FC = () => {\n  const classes = useStyles();\n  const [residents, setResidents] = useState<number>(0);\n  const [episodes, setEpisodes] = useState<any>([]);\n  const [error, setError] = useState<boolean>(false);\n  const [dimension, setDimension] = useState<string>('');\n  const [rickData, setRickData] = useState<any[]>([]);\n  const [showEpisodes, setShowEpisodes] = useState<boolean>(false);\n  const [open, setOpen] = React.useState<boolean>(false);\n\n  useEffect(() => {\n    axios\n      .get(`${baseUrl}character`)\n      .then((responese) => {\n        if (responese.status === 200) {\n          setRickData(responese.data.results);\n          setError(false);\n        }\n      })\n      .catch((error) => {\n        setError(true);\n        if (error.message !== 'Network Error') {\n          if (error.response.status === 503) {\n            alert('Service Unavailable, Please Try Again');\n          }\n        } else {\n          /* Handling error when 404 or others */\n          alert('Something Went Wrong');\n        }\n      });\n  }, []);\n\n  /**\n   * Method accept episodes array which contain URLS of episodes\n   *  Using substring method episode number sets in setEpisodes\n   * @param episodes {multiple episodes}\n   */\n\n  const getEpisodesNumber = (episodes: string[]): void => {\n    const episodesNumber: string[] = [];\n    episodes.forEach((episode: string) => {\n      episodesNumber.push(episode.substring(episode.lastIndexOf('/') + 1));\n    });\n    if (episodesNumber && episodesNumber.length) {\n      setEpisodes(episodesNumber);\n    }\n  };\n\n  /**\n   * Method set show episodes as true\n   * It sets data for Episodes component\n   * @param episodes{string}\n   */\n\n  const displayEpisodes = (episodes: string[]) => {\n    getEpisodesNumber(episodes);\n    setShowEpisodes(true);\n  };\n\n  /**\n   * Method fetch residents from base on location id\n   * It also sets residents count and dimension\n   * @param id {string}\n   */\n\n  const handleResidentsModal = async (id: string): Promise<void> => {\n    const response = await fetch(id);\n    const locationData: Location = await response.json();\n    if (locationData && locationData.residents?.length) {\n      setResidents(locationData.residents.length);\n      setDimension(locationData.dimension);\n    }\n    setOpen(true);\n  };\n\n  /**\n   * Method closed modal\n   */\n\n  const handleClose = (): void => {\n    setOpen(false);\n  };\n\n  /**\n   * Method received data from episodes component\n   * set setShoEpisodes\n   * @param showData {boolean}\n   */\n\n  const setEpisodesShowData = (showData: boolean) => {\n    setShowEpisodes(showData);\n  };\n\n  /**\n   * Method showCards is use for display ricks cards on UI\n   * @param id {number}\n   */\n\n  const showCards = (id: number) => {\n    const { image, species, name, location, origin, episode } = rickData[\n      id - 1\n    ];\n    return (\n      <Grid item xs={12} sm={6} md={6} lg={3} key={id}>\n        <Card>\n          <CardMedia\n            className={classes.cardMedia}\n            image={image}\n            style={{ width: '200px', height: '200px' }}\n          />\n          <CardContent className={classes.carContent}>\n            <Typography gutterBottom variant='h5' component='h2'>\n              {name}\n            </Typography>\n            <Typography variant='subtitle1' gutterBottom>\n              species: {species}\n            </Typography>\n            <Typography variant='subtitle1' gutterBottom>\n              Origin: {origin.name}\n            </Typography>\n            <Typography variant='subtitle1' gutterBottom>\n              Location: {location.name}\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <Button\n              size='small'\n              color='primary'\n              onClick={() => displayEpisodes(episode)}\n            >\n              Episodes\n            </Button>\n            <Button\n              size='small'\n              color='primary'\n              onClick={() => handleResidentsModal(location.url)}\n            >\n              Residents\n            </Button>\n            <Dialog\n              open={open}\n              onClose={handleClose}\n              aria-labelledby='alert-dialog-title'\n              aria-describedby='alert-dialog-description'\n            >\n              <DialogTitle id='alert-dialog-title'>Residents</DialogTitle>\n              <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                  <Typography component={'span'} variant={'body2'}>\n                    Residents : {residents} <br />\n                    Dimension : {dimension}\n                  </Typography>\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} color='primary' autoFocus>\n                  Ok\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </CardActions>\n        </Card>\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <AppBar position='static'>\n        <Typography variant='h4' className={classes.header}>\n          The Rick and Morty\n        </Typography>\n      </AppBar>\n      {!error && !showEpisodes && rickData && (\n        <Grid container spacing={2} className={classes.rickContainer}>\n          {rickData && rickData.map((rick: RickData) => showCards(rick.id))}\n        </Grid>\n      )}\n      {!error && showEpisodes && (\n        <Episodes\n          episodes={episodes}\n          setEpisodesShowData={setEpisodesShowData}\n        />\n      )}\n\n      {error && (\n        <Typography\n          variant='h3'\n          style={{ display: 'flex', justifyContent: 'center' }}\n        >\n          Oops! Something went wrong !!!!!\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport default Ricks;\n","import React from 'react';\nimport Ricks from './components/Ricks/Ricks';\n\nconst App = () => {\n  return (\n    <div>\n      <Ricks />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}